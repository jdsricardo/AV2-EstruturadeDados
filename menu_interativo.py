"""
Menu interativo para o Sistema de Emerg√™ncia M√©dica
Permite ao usu√°rio escolher diferentes op√ß√µes de visualiza√ß√£o e consulta
"""

from visualizador import VisualizadorGrafo

class MenuInterativo:
    def __init__(self, grafo_emergencia):
        self.grafo = grafo_emergencia
        self.visualizador = VisualizadorGrafo(grafo_emergencia)
    
    def executar(self):
        """Loop principal do menu interativo"""
        while True:
            self.exibir_menu_principal()
            opcao = input("\nüëÜ Escolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                self.exibir_panorama_geral()
            elif opcao == "2":
                self.consultar_rota_especifica()
            elif opcao == "3":
                self.visualizar_grafo_completo()
            elif opcao == "4":
                self.exibir_informacoes_sistema()
            elif opcao == "5":
                print("\nüëã Encerrando sistema de emerg√™ncia m√©dica...")
                break
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")
            
            input("\n‚è∏Ô∏è  Pressione ENTER para continuar...")
    
    def exibir_menu_principal(self):
        """Exibe o menu principal de op√ß√µes"""
        print("\n" + "="*60)
        print("üè• MENU PRINCIPAL - SISTEMA DE EMERG√äNCIA M√âDICA")
        print("="*60)
        print("1Ô∏è‚É£  Panorama Geral da Rede")
        print("2Ô∏è‚É£  Consultar Rota Espec√≠fica")
        print("3Ô∏è‚É£  Visualizar Grafo Completo")
        print("4Ô∏è‚É£  Informa√ß√µes do Sistema")
        print("5Ô∏è‚É£  Sair")
        print("="*60)
    
    def exibir_panorama_geral(self):
        """Exibe informa√ß√µes gerais sobre toda a rede"""
        print("\n" + "="*50)
        print("üìä PANORAMA GERAL DA REDE HOSPITALAR")
        print("="*50)
        
        # Informa√ß√µes dos pontos
        print("\nüìç PONTOS M√âDICOS CADASTRADOS:")
        self.grafo.exibir_pontos()
        
        # Matriz com tr√¢nsito atual
        print("\nüìä TEMPOS DE DESLOCAMENTO ATUAIS (com tr√¢nsito):")
        self.grafo.exibir_matriz_com_transito()
        
        # Estat√≠sticas da rede
        self.exibir_estatisticas_rede()
    
    def consultar_rota_especifica(self):
        """Permite ao usu√°rio consultar uma rota espec√≠fica"""
        print("\n" + "="*50)
        print("üõ£Ô∏è  CONSULTA DE ROTA ESPEC√çFICA")
        print("="*50)
        
        # Listar pontos dispon√≠veis
        pontos = list(self.grafo.pontos.keys())
        print("\nüìç Pontos dispon√≠veis:")
        for i, ponto in enumerate(pontos, 1):
            tipo = self.grafo.tipos[ponto]
            emoji = self.grafo.get_emoji_tipo(tipo)
            print(f"  {i:2d}. {emoji} {ponto}")
        
        try:
            # Selecionar origem
            print("\nüîµ Selecione o ponto de ORIGEM:")
            origem_idx = int(input("Digite o n√∫mero: ")) - 1
            if origem_idx < 0 or origem_idx >= len(pontos):
                print("‚ùå √çndice inv√°lido!")
                return
            origem = pontos[origem_idx]
            
            # Selecionar destino
            print("\nüî¥ Selecione o ponto de DESTINO:")
            destino_idx = int(input("Digite o n√∫mero: ")) - 1
            if destino_idx < 0 or destino_idx >= len(pontos):
                print("‚ùå √çndice inv√°lido!")
                return
            destino = pontos[destino_idx]
            
            if origem == destino:
                print("‚ùå Origem e destino n√£o podem ser iguais!")
                return
            
            # Buscar rota
            print(f"\nüîç Buscando rota mais r√°pida de {origem} para {destino}...")
            rota, tempo_total = self.grafo.encontrar_rota_mais_rapida(origem, destino)
            
            if rota:
                print(f"\n‚úÖ ROTA ENCONTRADA:")
                print(f"üõ£Ô∏è  Caminho: {' ‚Üí '.join(rota)}")
                print(f"‚è±Ô∏è  Tempo total: {tempo_total:.1f} minutos")
                
                # Perguntar se quer visualizar
                visualizar = input("\nüñºÔ∏è  Deseja visualizar esta rota? (s/n): ").lower()
                if visualizar == 's':
                    self.visualizador.plotar_rota(rota, tempo_total)
            else:
                print(f"\n‚ùå N√£o foi poss√≠vel encontrar rota entre {origem} e {destino}")
        
        except ValueError:
            print("‚ùå Por favor, digite um n√∫mero v√°lido!")
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
    
    def visualizar_grafo_completo(self):
        """Gera a visualiza√ß√£o completa do grafo"""
        print("\nüñºÔ∏è  Gerando visualiza√ß√£o completa do grafo...")
        self.visualizador.plotar_grafo()
    
    def exibir_informacoes_sistema(self):
        """Exibe informa√ß√µes t√©cnicas do sistema"""
        print("\n" + "="*50)
        print("‚ÑπÔ∏è  INFORMA√á√ïES DO SISTEMA")
        print("="*50)
        
        num_pontos = len(self.grafo.pontos)
        num_conexoes = self.contar_conexoes()
        
        print(f"üìä Total de pontos m√©dicos: {num_pontos}")
        print(f"üõ£Ô∏è  Total de conex√µes: {num_conexoes}")
        print(f"üßÆ Tamanho da matriz: {num_pontos}x{num_pontos}")
        
        # Tipos de pontos
        tipos_count = {}
        for tipo in self.grafo.tipos.values():
            tipos_count[tipo] = tipos_count.get(tipo, 0) + 1
        
        print(f"\nüè¢ Distribui√ß√£o por tipo:")
        for tipo, count in tipos_count.items():
            emoji = self.grafo.get_emoji_tipo(tipo)
            nome_tipo = tipo.replace('_', ' ').title()
            print(f"  {emoji} {nome_tipo}: {count}")
        
        print(f"\nüöó Sistema de tr√¢nsito: Din√¢mico (varia√ß√£o aleat√≥ria)")
        print(f"üß≠ Algoritmo de rota: Dijkstra")
        print(f"üìê Estrutura de dados: Matriz de adjac√™ncia")
    
    def exibir_estatisticas_rede(self):
        """Calcula e exibe estat√≠sticas da rede"""
        print(f"\nüìà ESTAT√çSTICAS DA REDE:")
        
        # Tempo m√©dio entre pontos conectados
        tempos = []
        for i in range(len(self.grafo.matriz)):
            for j in range(i + 1, len(self.grafo.matriz)):
                if self.grafo.matriz[i][j] != float('inf'):
                    tempos.append(self.grafo.get_tempo_com_transito(i, j))
        
        if tempos:
            tempo_medio = sum(tempos) / len(tempos)
            tempo_min = min(tempos)
            tempo_max = max(tempos)
            
            print(f"  ‚è±Ô∏è  Tempo m√©dio entre pontos: {tempo_medio:.1f} min")
            print(f"  üèÉ Conex√£o mais r√°pida: {tempo_min:.1f} min")
            print(f"  üêå Conex√£o mais lenta: {tempo_max:.1f} min")
        
        # Ponto mais conectado
        conexoes_por_ponto = {}
        pontos_nomes = list(self.grafo.pontos.keys())
        
        for nome, idx in self.grafo.pontos.items():
            conexoes = 0
            for j in range(len(self.grafo.matriz)):
                if idx != j and self.grafo.matriz[idx][j] != float('inf'):
                    conexoes += 1
            conexoes_por_ponto[nome] = conexoes
        
        if conexoes_por_ponto:
            ponto_mais_conectado = max(conexoes_por_ponto, key=conexoes_por_ponto.get)
            max_conexoes = conexoes_por_ponto[ponto_mais_conectado]
            print(f"  üåü Ponto mais conectado: {ponto_mais_conectado} ({max_conexoes} conex√µes)")
    
    def contar_conexoes(self):
        """Conta o n√∫mero total de conex√µes na rede"""
        conexoes = 0
        for i in range(len(self.grafo.matriz)):
            for j in range(i + 1, len(self.grafo.matriz)):
                if self.grafo.matriz[i][j] != float('inf'):
                    conexoes += 1
        return conexoes
